import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.commons.io.FileUtils;

public class ExcelSorter {

    public static void main(String[] args) throws IOException {
        // Path to the directory containing Excel files
        String directoryPath = "/path/to/your/folder";

        // Get all Excel files recursively
        Iterator<File> files = FileUtils.iterateFiles(new File(directoryPath), new String[]{"xlsx"}, true);

        while (files.hasNext()) {
            File file = files.next();
            sortExcelFile(file);
        }
    }

    private static void sortExcelFile(File file) throws IOException {
        FileInputStream fis = new FileInputStream(file);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

        // Get data from Excel sheet and store in a List of Lists
        ArrayList<ArrayList<String>> data = new ArrayList<>();
        for (Row row : sheet) {
            ArrayList<String> rowData = new ArrayList<>();
            for (Cell cell : row) {
                rowData.add(cell.getStringCellValue());
            }
            data.add(rowData);
        }

        // Sort data based on a particular column (e.g., column index 0)
        Collections.sort(data, (a, b) -> a.get(0).compareTo(b.get(0)));

        // Write sorted data back to Excel sheet
        for (int i = 0; i < data.size(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) {
                row = sheet.createRow(i);
            }
            for (int j = 0; j < data.get(i).size(); j++) {
                Cell cell = row.createCell(j);
                cell.setCellValue(data.get(i).get(j));
            }
        }

        // Write changes back to the same Excel file
        FileOutputStream fos = new FileOutputStream(file);
        workbook.write(fos);

        // Close resources
        fos.close();
        workbook.close();
        fis.close();
    }
}
